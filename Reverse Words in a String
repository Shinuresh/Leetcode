Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

----------------------------------------------------------------------------------------------------SOLUTION-------------------------------------------------------------------------------
APPROACH->>
To approach this problem, you can follow these steps:

Trim the input string: Remove any leading or trailing spaces from the input string to ensure there are no extra spaces.

Split the string into words: Split the trimmed string into a list of words using space as the delimiter. You can use the split() method available in most programming languages for this purpose.

Reverse the order of the words: Reverse the order of the words in the list. You can achieve this by using the reverse indexing or by using a loop to iterate through the list and construct a new reversed list.

Join the reversed words: Join the reversed words using a single space as the separator. You can use the join() method available in most programming languages to concatenate the words with a space in between.

Return the result: Return the final reversed string.

CODE->
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip()
        words = s.split()
        reversed_words = words[::-1]
        reversed_string = ' '.join(reversed_words)
        return reversed_string


