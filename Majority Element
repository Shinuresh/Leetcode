Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2



---------------------------------------------------------------SOLUTION----------------------------------------------------------------------------------------

//C++

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0,majorityElement = 0;
        for(int itr = 0;itr <nums.size(); itr++){
            if(count == 0) majorityElement = nums[itr];

            if(majorityElement == nums[itr]) count++;
            else count -= 1;
        }
        return majorityElement;
    }
};


//JAVA

public class QO_Majority Element {
public int majorityElement(int[] nums) {
int ansIndex = 0;
int count = 0;
for (int i = 1; i < nums.length; i++) {
count = nums[ansIndex] == nums[i] ? count + 1: count - 1;
if (count < 0) {
count = 0;
ansIndex = i;
}
}
return nums[ansIndex];
}
}
