Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


-------------------------------------------SOLUTION-----------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
bool checkInclusion(string s1, string s2) {
int n1=s1.length(),n2=s2.length(),i=0,j=0;
sort(s1.begin(),s1.end());
j=i+n1-1;
while(j<n2){
string s;
for(int k=i;k<=j;k++){
s.push_back(s2[k]);
}
sort(s.begin(),s.end());
if(s==s1)return true;
i++,j++;
}
return false;
}
};
