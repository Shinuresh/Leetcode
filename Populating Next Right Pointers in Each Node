You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 212 - 1].
-1000 <= Node.val <= 1000
 
 
 -----------------------SOLUTION-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 class Solution:
   def connect(self,root):
        node=root
        while(root):
            
            childhead=None
            child=None
            while(root):
                if root.left:
                    if childhead is None:
                        childhead=root.left
                        child=root.left
                    else:
                        child.next=root.left
                        child=child.next
                if root.right:
                    if childhead is None:
                        childhead=root.right
                        child=root.right
                    else:
                        child.next=root.right
                        child=child.next
                root=root.next
            root=childhead
        return node
